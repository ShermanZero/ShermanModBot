"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Resources_1 = require("../classes/Resources");
module.exports = (client, member) => {
    const guild = member.guild;
    let guildDir = Resources_1.default.getGuildDirectoryFromGuild(member.guild);
    let guildConfig = require(path.resolve(guildDir, client.global_config.files.guild_config));
    const defaultChannel = guild.channels.get(guildConfig.channels.default);
    if (!defaultChannel)
        return;
    let unrankedRole = guild.roles.get("609248072706424863");
    if (unrankedRole)
        unrankedRole = unrankedRole;
    member.roles.add(unrankedRole).catch(err => {
        console.log(err);
    });
    let serverRules = guild.channels.get(client.config.channels.shermanzeros_hangout.server_rules);
    let serverInfo = guild.channels.get(client.config.channels.shermanzeros_hangout.server_information);
    let autoRoles = guild.channels.get(client.config.channels.shermanzeros_hangout.auto_roles);
    defaultChannel
        .send(`Welcome ${member.user} to **${guild.name}**!  You are member **#${guild.memberCount}!  Check out the ${serverRules} and ${serverInfo} regarding the different channels.  **Please change your nickname to match your Twitch account name, and link your Twitch and Discord together.**  Be sure to assign yourself some roles over in ${autoRoles}, based on what you want to see!  Get to know everyone, have a great time, and thanks for joining!`)
        .catch((err) => {
        console.log(err);
    });
    Resources_1.default.createUserDirectory(client, member.guild, member);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpbGRNZW1iZXJBZGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXZlbnRzL2d1aWxkTWVtYmVyQWRkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsNkJBQTZCO0FBRTdCLG9EQUF3QztBQUV4QyxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsTUFBVyxFQUFFLE1BQW1CLEVBQUUsRUFBRTtJQUNwRCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBRTNCLElBQUksUUFBUSxHQUFHLG1CQUFJLENBQUMsMEJBQTBCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdELElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBRTNGLE1BQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFeEUsSUFBSSxDQUFFLGNBQThCO1FBQUUsT0FBTztJQUU3QyxJQUFJLFlBQVksR0FBUSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQzlELElBQUksWUFBWTtRQUFFLFlBQVksR0FBRyxZQUFvQixDQUFDO0lBRXRELE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUN6QyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDL0YsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNwRyxJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUUxRixjQUErQjtTQUM3QixJQUFJLENBQ0gsV0FBVyxNQUFNLENBQUMsSUFBSSxTQUFTLEtBQUssQ0FBQyxJQUFJLDBCQUEwQixLQUFLLENBQUMsV0FBVyxvQkFBb0IsV0FBVyxRQUFRLFVBQVUsb01BQW9NLFNBQVMsb0dBQW9HLENBQ3ZiO1NBQ0EsS0FBSyxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUU7UUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDLENBQUMsQ0FBQztJQUVMLG1CQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDekQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3VpbGRNZW1iZXIsIFJvbGUsIFRleHRDaGFubmVsIH0gZnJvbSAnZGlzY29yZC5qcyc7XHJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XHJcblxyXG5pbXBvcnQgcnNyYyBmcm9tICcuLi9jbGFzc2VzL1Jlc291cmNlcyc7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IChjbGllbnQ6IGFueSwgbWVtYmVyOiBHdWlsZE1lbWJlcikgPT4ge1xyXG4gIGNvbnN0IGd1aWxkID0gbWVtYmVyLmd1aWxkO1xyXG5cclxuICBsZXQgZ3VpbGREaXIgPSByc3JjLmdldEd1aWxkRGlyZWN0b3J5RnJvbUd1aWxkKG1lbWJlci5ndWlsZCk7XHJcbiAgbGV0IGd1aWxkQ29uZmlnID0gcmVxdWlyZShwYXRoLnJlc29sdmUoZ3VpbGREaXIsIGNsaWVudC5nbG9iYWxfY29uZmlnLmZpbGVzLmd1aWxkX2NvbmZpZykpO1xyXG5cclxuICBjb25zdCBkZWZhdWx0Q2hhbm5lbCA9IGd1aWxkLmNoYW5uZWxzLmdldChndWlsZENvbmZpZy5jaGFubmVscy5kZWZhdWx0KTtcclxuXHJcbiAgaWYgKCEoZGVmYXVsdENoYW5uZWwgYXMgVGV4dENoYW5uZWwpKSByZXR1cm47XHJcblxyXG4gIGxldCB1bnJhbmtlZFJvbGU6IGFueSA9IGd1aWxkLnJvbGVzLmdldChcIjYwOTI0ODA3MjcwNjQyNDg2M1wiKTtcclxuICBpZiAodW5yYW5rZWRSb2xlKSB1bnJhbmtlZFJvbGUgPSB1bnJhbmtlZFJvbGUgYXMgUm9sZTtcclxuXHJcbiAgbWVtYmVyLnJvbGVzLmFkZCh1bnJhbmtlZFJvbGUpLmNhdGNoKGVyciA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gIH0pO1xyXG5cclxuICBsZXQgc2VydmVyUnVsZXMgPSBndWlsZC5jaGFubmVscy5nZXQoY2xpZW50LmNvbmZpZy5jaGFubmVscy5zaGVybWFuemVyb3NfaGFuZ291dC5zZXJ2ZXJfcnVsZXMpO1xyXG4gIGxldCBzZXJ2ZXJJbmZvID0gZ3VpbGQuY2hhbm5lbHMuZ2V0KGNsaWVudC5jb25maWcuY2hhbm5lbHMuc2hlcm1hbnplcm9zX2hhbmdvdXQuc2VydmVyX2luZm9ybWF0aW9uKTtcclxuICBsZXQgYXV0b1JvbGVzID0gZ3VpbGQuY2hhbm5lbHMuZ2V0KGNsaWVudC5jb25maWcuY2hhbm5lbHMuc2hlcm1hbnplcm9zX2hhbmdvdXQuYXV0b19yb2xlcyk7XHJcblxyXG4gIChkZWZhdWx0Q2hhbm5lbCBhcyBUZXh0Q2hhbm5lbCkhXHJcbiAgICAuc2VuZChcclxuICAgICAgYFdlbGNvbWUgJHttZW1iZXIudXNlcn0gdG8gKioke2d1aWxkLm5hbWV9KiohICBZb3UgYXJlIG1lbWJlciAqKiMke2d1aWxkLm1lbWJlckNvdW50fSEgIENoZWNrIG91dCB0aGUgJHtzZXJ2ZXJSdWxlc30gYW5kICR7c2VydmVySW5mb30gcmVnYXJkaW5nIHRoZSBkaWZmZXJlbnQgY2hhbm5lbHMuICAqKlBsZWFzZSBjaGFuZ2UgeW91ciBuaWNrbmFtZSB0byBtYXRjaCB5b3VyIFR3aXRjaCBhY2NvdW50IG5hbWUsIGFuZCBsaW5rIHlvdXIgVHdpdGNoIGFuZCBEaXNjb3JkIHRvZ2V0aGVyLioqICBCZSBzdXJlIHRvIGFzc2lnbiB5b3Vyc2VsZiBzb21lIHJvbGVzIG92ZXIgaW4gJHthdXRvUm9sZXN9LCBiYXNlZCBvbiB3aGF0IHlvdSB3YW50IHRvIHNlZSEgIEdldCB0byBrbm93IGV2ZXJ5b25lLCBoYXZlIGEgZ3JlYXQgdGltZSwgYW5kIHRoYW5rcyBmb3Igam9pbmluZyFgXHJcbiAgICApXHJcbiAgICAuY2F0Y2goKGVycjogYW55KSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICB9KTtcclxuXHJcbiAgcnNyYy5jcmVhdGVVc2VyRGlyZWN0b3J5KGNsaWVudCwgbWVtYmVyLmd1aWxkLCBtZW1iZXIpO1xyXG59O1xyXG4iXX0=