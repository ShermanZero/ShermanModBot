"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("colors");
const fs = require("fs");
const path = require("path");
const ExitHandler_1 = require("../classes/ExitHandler");
const Resources_1 = require("../classes/Resources");
const boot_1 = require("../resources/boot");
module.exports = client => {
  client.user.setActivity(client.config.status);
  console.log(boot_1.default.red);
  ExitHandler_1.default.init(client);
  let commandArray = [...client.commands.keys()].sort();
  console.log(`Loaded ${commandArray.length.toString().magenta} command(s)`, "[@everyone]".green, "[@moderator]".yellow, "[@owner]".red);
  for (var i = 0; i < commandArray.length; i++) {
    var commandName = commandArray[i];
    var command = client.commands.get(commandName);
    commandName = `[${commandName}]`;
    if (command.props.requiresElevation && command.props.requiresElevation === client.config.elevation_names.moderator) console.log(commandArray[i].yellow + " - " + command.props.description);
    else if (command.props.requiresElevation && command.props.requiresElevation === client.config.elevation_names.owner) console.log(commandArray[i].red + " - " + command.props.description);
    else console.log(commandArray[i].green + " - " + command.props.description);
  }
  console.log("...");
  client.guilds.forEach(guild => {
    let guildDir = Resources_1.default.getGuildDirectoryFromGuild(guild);
    if (!fs.existsSync(guildDir)) {
      fs.mkdirSync(guildDir, { recursive: true });
      fs.mkdirSync(path.join(guildDir, client.config.files.removed), {
        recursive: true
      });
    }
    let guildName = Resources_1.default.getGuildNameFromGuild(guild);
    client.usersInSession[guildName] = {};
    console.log(`*Registered [${guildName.magenta}] to session --- looking for existing members:`);
    fs.readdirSync(guildDir).forEach(dir => {
      let username = dir;
      if (!client.hasUser(guild, username)) {
        let content = Resources_1.default.getUserContentsFromNameWithGuild(client, guild, null, username);
        if (content === null || typeof content === "undefined") return;
        process.stdout.write("  ");
        client.registerUser(content);
      }
    });
    console.log(`Found all existing members of [${guildName.magenta}] (currently ${Object.keys(client.getGuild(guildName)).length.toString().green})`);
  });
  let readyMessage = `Ready to serve in ${client.channels.size} channel(s) on ${client.guilds.size} guild(s), for a total of ${client.users.size} users`.inverse;
  let footer = "=====================================================================================".red;
  console.log(`...\n${readyMessage}\n${footer}`);
};
//# sourceMappingURL=data:application/json;base64,
