"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("colors");
const Discord = require("discord.js");
const fs = require("fs");
const path = require("path");
const Resources_1 = require("./classes/Resources");
const global_config_1 = require("./resources/global_config");
let client = new Discord.Client();
init();
start();
client.login(global_config_1.default.token);
function init() {
    client.global_config = global_config_1.default;
    client.usersInSession = new Map();
    client.masterLog = [];
    client.getGuild = function (guildName) {
        return client.usersInSession[guildName];
    };
    client.updateUser = function (content) {
        var guildName = content.hidden.guildname;
        var username = content.hidden.username;
        var guild = client.usersInSession[guildName];
        guild[username] = content;
        Object.defineProperty(content, "hidden", {
            enumerable: false
        });
    };
    client.registerUser = function (content) {
        client.updateUser(content);
        console.log("*Registered [" + content.hidden.username.magenta + "] to guild [" + content.hidden.guildname.magenta + "]");
    };
    client.hasUser = function (guild, username) {
        var userGuild = client.usersInSession[Resources_1.default.getGuildNameFromGuild(guild)];
        if (userGuild === null || typeof userGuild === "undefined")
            return false;
        var user = userGuild[username];
        return !(user === null || typeof user === "undefined");
    };
    client.getUserContent = function (guild, username) {
        var guildName = Resources_1.default.getGuildNameFromGuild(guild);
        var userGuild = client.usersInSession[guildName];
        if (userGuild === null) {
            console.error(("!! Could not retrieve [" + username + "'s] guild").red);
            return null;
        }
        if (userGuild[username] === null || typeof userGuild[username] === "undefined") {
            console.error(("!! Could not locate [" + username + "] in [" + guildName + "]").red);
            return null;
        }
        return userGuild[username];
    };
    client.removeUser = function (guild, username) {
        var userGuild = client.usersInSession[Resources_1.default.getGuildNameFromGuild(guild)];
        if (userGuild === null || typeof userGuild === "undefined")
            return;
        userGuild["delete"](username);
    };
    client.deleteUser = function (guild, username) {
        client.removeUser(guild, username);
        Resources_1.default.destroyUserDirectory(guild, username);
    };
}
function start() {
    var eventsPath = path.join(__dirname, "events");
    fs.readdir(eventsPath, function (err, files) {
        if (err)
            return console.error(err);
        files.forEach(function (file) {
            if (!file.endsWith(".js"))
                return;
            var event = require(path.join(__dirname, "events", file));
            var eventName = file.split(".")[0];
            console.log("--registering event", eventName);
            client.on(eventName, event.bind(null, client));
            delete require.cache[require.resolve(path.join(__dirname, "events", file))];
        });
    });
    client.commands = new Map();
    var commandsPath = path.join(__dirname, "commands");
    fs.readdir(commandsPath, function (err, files) {
        if (err)
            return console.error(err);
        files.forEach(function (file) {
            if (!file.endsWith(".js"))
                return;
            var props = require(path.join(__dirname, "commands", file));
            var commandName = file.split(".")[0];
            console.log("--registering command", commandName, props);
            client.commands.set(commandName, props);
            console.log("--set command", commandName, props);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrQkFBZ0I7QUFFaEIsc0NBQXNDO0FBQ3RDLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFFN0IsbURBQXVDO0FBQ3ZDLDZEQUFzRDtBQUV0RCxJQUFJLE1BQU0sR0FBUSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUV2QyxJQUFJLEVBQUUsQ0FBQztBQUNQLEtBQUssRUFBRSxDQUFDO0FBRVIsTUFBTSxDQUFDLEtBQUssQ0FBQyx1QkFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRWxDLFNBQVMsSUFBSTtJQUNYLE1BQU0sQ0FBQyxhQUFhLEdBQUcsdUJBQWEsQ0FBQztJQUNyQyxNQUFNLENBQUMsY0FBYyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDbEMsTUFBTSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFFdEIsTUFBTSxDQUFDLFFBQVEsR0FBRyxVQUFTLFNBQWlCO1FBQzFDLE9BQU8sTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQUM7SUFFRixNQUFNLENBQUMsVUFBVSxHQUFHLFVBQVMsT0FBWTtRQUN2QyxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUN6QyxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUN2QyxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzdDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxPQUFPLENBQUM7UUFDMUIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFO1lBQ3ZDLFVBQVUsRUFBRSxLQUFLO1NBQ2xCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUVGLE1BQU0sQ0FB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QUFDLENBQUMsQ0FBQztZQUM1RCxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXJDLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3pELE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUV4QyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2NvbG9ycyc7XG5cbmltcG9ydCAqIGFzIERpc2NvcmQgZnJvbSAnZGlzY29yZC5qcyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgcnNyYyBmcm9tICcuL2NsYXNzZXMvUmVzb3VyY2VzJztcbmltcG9ydCBnbG9iYWxfY29uZmlnIGZyb20gJy4vcmVzb3VyY2VzL2dsb2JhbF9jb25maWcnO1xuXG5sZXQgY2xpZW50OiBhbnkgPSBuZXcgRGlzY29yZC5DbGllbnQoKTtcblxuaW5pdCgpO1xuc3RhcnQoKTtcblxuY2xpZW50LmxvZ2luKGdsb2JhbF9jb25maWcudG9rZW4pO1xuXG5mdW5jdGlvbiBpbml0KCkge1xuICBjbGllbnQuZ2xvYmFsX2NvbmZpZyA9IGdsb2JhbF9jb25maWc7XG4gIGNsaWVudC51c2Vyc0luU2Vzc2lvbiA9IG5ldyBNYXAoKTtcbiAgY2xpZW50Lm1hc3RlckxvZyA9IFtdO1xuXG4gIGNsaWVudC5nZXRHdWlsZCA9IGZ1bmN0aW9uKGd1aWxkTmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGNsaWVudC51c2Vyc0luU2Vzc2lvbltndWlsZE5hbWVdO1xuICB9O1xuXG4gIGNsaWVudC51cGRhdGVVc2VyID0gZnVuY3Rpb24oY29udGVudDogYW55KSB7XG4gICAgdmFyIGd1aWxkTmFtZSA9IGNvbnRlbnQuaGlkZGVuLmd1aWxkbmFtZTtcbiAgICB2YXIgdXNlcm5hbWUgPSBjb250ZW50LmhpZGRlbi51c2VybmFtZTtcbiAgICB2YXIgZ3VpbGQgPSBjbGllbnQudXNlcnNJblNlc3Npb25bZ3VpbGROYW1lXTtcbiAgICBndWlsZFt1c2VybmFtZV0gPSBjb250ZW50O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb250ZW50LCBcImhpZGRlblwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgIH0pO1xuICB9O1xuXG4gIGNsaWVudC5yZWdpc3RlclVzZXIgPSBmdW5jdGlvbihjb250ZW50OiBhbnkpIHtcbiAgICBjbGllbnQudXBkYXRlVXNlcihjb250ZW50KTtcbiAgICBjb25zb2xlLmxvZyhcIipSZWdpc3RlcmVkIFtcIiArIGNvbnRlbnQuaGlkZGVuLnVzZXJuYW1lLm1hZ2VudGEgKyBcIl0gdG8gZ3VpbGQgW1wiICsgY29udGVudC5oaWRkZW4uZ3VpbGRuYW1lLm1hZ2VudGEgKyBcIl1cIik7XG4gIH07XG5cbiAgY2xpZW50Lmhhc1VzZXIgPSBmdW5jdGlvbihndWlsZDogRGlzY29yZC5HdWlsZCwgdXNlcm5hbWU6IHN0cmluZykge1xuICAgIHZhciB1c2VyR3VpbGQgPSBjbGllbnQudXNlcnNJblNlc3Npb25bcnNyYy5nZXRHdWlsZE5hbWVGcm9tR3VpbGQoZ3VpbGQpXTtcbiAgICBpZiAodXNlckd1aWxkID09PSBudWxsIHx8IHR5cGVvZiB1c2VyR3VpbGQgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciB1c2VyID0gdXNlckd1aWxkW3VzZXJuYW1lXTtcbiAgICByZXR1cm4gISh1c2VyID09PSBudWxsIHx8IHR5cGVvZiB1c2VyID09PSBcInVuZGVmaW5lZFwiKTtcbiAgfTtcblxuICBjbGllbnQuZ2V0VXNlckNvbnRlbnQgPSBmdW5jdGlvbihndWlsZDogRGlzY29yZC5HdWlsZCwgdXNlcm5hbWU6IHN0cmluZykge1xuICAgIHZhciBndWlsZE5hbWUgPSByc3JjLmdldEd1aWxkTmFtZUZyb21HdWlsZChndWlsZCk7XG4gICAgdmFyIHVzZXJHdWlsZCA9IGNsaWVudC51c2Vyc0luU2Vzc2lvbltndWlsZE5hbWVdO1xuXG4gICAgaWYgKHVzZXJHdWlsZCA9PT0gbnVsbCkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCIhISBDb3VsZCBub3QgcmV0cmlldmUgW1wiICsgdXNlcm5hbWUgKyBcIidzXSBndWlsZFwiKS5yZWQpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHVzZXJHdWlsZFt1c2VybmFtZV0gPT09IG51bGwgfHwgdHlwZW9mIHVzZXJHdWlsZFt1c2VybmFtZV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiISEgQ291bGQgbm90IGxvY2F0ZSBbXCIgKyB1c2VybmFtZSArIFwiXSBpbiBbXCIgKyBndWlsZE5hbWUgKyBcIl1cIikucmVkKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB1c2VyR3VpbGRbdXNlcm5hbWVdO1xuICB9O1xuXG4gIGNsaWVudC5yZW1vdmVVc2VyID0gZnVuY3Rpb24oZ3VpbGQ6IERpc2NvcmQuR3VpbGQsIHVzZXJuYW1lOiBzdHJpbmcpIHtcbiAgICB2YXIgdXNlckd1aWxkID0gY2xpZW50LnVzZXJzSW5TZXNzaW9uW3JzcmMuZ2V0R3VpbGROYW1lRnJvbUd1aWxkKGd1aWxkKV07XG4gICAgaWYgKHVzZXJHdWlsZCA9PT0gbnVsbCB8fCB0eXBlb2YgdXNlckd1aWxkID09PSBcInVuZGVmaW5lZFwiKSByZXR1cm47XG5cbiAgICB1c2VyR3VpbGRbXCJkZWxldGVcIl0odXNlcm5hbWUpO1xuICB9O1xuXG4gIGNsaWVudC5kZWxldGVVc2VyID0gZnVuY3Rpb24oZ3VpbGQ6IERpc2NvcmQuR3VpbGQsIHVzZXJuYW1lOiBzdHJpbmcpIHtcbiAgICBjbGllbnQucmVtb3ZlVXNlcihndWlsZCwgdXNlcm5hbWUpO1xuICAgIHJzcmMuZGVzdHJveVVzZXJEaXJlY3RvcnkoZ3VpbGQsIHVzZXJuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RhcnQoKSB7XG4gIHZhciBldmVudHNQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgXCJldmVudHNcIik7XG4gIGZzLnJlYWRkaXIoZXZlbnRzUGF0aCwgZnVuY3Rpb24oZXJyLCBmaWxlcykge1xuICAgIGlmIChlcnIpIHJldHVybiBjb25zb2xlLmVycm9yKGVycik7XG4gICAgZmlsZXMuZm9yRWFjaChmdW5jdGlvbihmaWxlKSB7XG4gICAgICBpZiAoIWZpbGUuZW5kc1dpdGgoXCIuanNcIikpIHJldHVybjtcbiAgICAgIHZhciBldmVudCA9IHJlcXVpcmUocGF0aC5qb2luKF9fZGlybmFtZSwgXCJldmVudHNcIiwgZmlsZSkpIGFzIEZ1bmN0aW9uO1xuICAgICAgdmFyIGV2ZW50TmFtZSA9IGZpbGUuc3BsaXQoXCIuXCIpWzBdO1xuXG4gICAgICBjb25zb2xlLmxvZyhcIi0tcmVnaXN0ZXJpbmcgZXZlbnRcIiwgZXZlbnROYW1lKTtcbiAgICAgIGNsaWVudC5vbihldmVudE5hbWUsIGV2ZW50LmJpbmQobnVsbCwgY2xpZW50KSk7XG4gICAgICBkZWxldGUgcmVxdWlyZS5jYWNoZVtyZXF1aXJlLnJlc29sdmUocGF0aC5qb2luKF9fZGlybmFtZSwgXCJldmVudHNcIiwgZmlsZSkpXTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgY2xpZW50LmNvbW1hbmRzID0gbmV3IE1hcCgpO1xuICB2YXIgY29tbWFuZHNQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgXCJjb21tYW5kc1wiKTtcblxuICBmcy5yZWFkZGlyKGNvbW1hbmRzUGF0aCwgZnVuY3Rpb24oZXJyLCBmaWxlcykge1xuICAgIGlmIChlcnIpIHJldHVybiBjb25zb2xlLmVycm9yKGVycik7XG4gICAgZmlsZXMuZm9yRWFjaChmdW5jdGlvbihmaWxlKSB7XG4gICAgICBpZiAoIWZpbGUuZW5kc1dpdGgoXCIuanNcIikpIHJldHVybjtcbiAgICAgIHZhciBwcm9wcyA9IHJlcXVpcmUocGF0aC5qb2luKF9fZGlybmFtZSwgXCJjb21tYW5kc1wiLCBmaWxlKSk7XG4gICAgICB2YXIgY29tbWFuZE5hbWUgPSBmaWxlLnNwbGl0KFwiLlwiKVswXTtcblxuICAgICAgY29uc29sZS5sb2coXCItLXJlZ2lzdGVyaW5nIGNvbW1hbmRcIiwgY29tbWFuZE5hbWUsIHByb3BzKTtcbiAgICAgIGNsaWVudC5jb21tYW5kcy5zZXQoY29tbWFuZE5hbWUsIHByb3BzKTtcblxuICAgICAgY29uc29sZS5sb2coXCItLXNldCBjb21tYW5kXCIsIGNvbW1hbmROYW1lLCBwcm9wcyk7XG4gICAgfSk7XG4gIH0pO1xufVxuIl19