"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("colors");
const Discord = require("discord.js");
const fs = require("fs");
const path = require("path");
const Resources_1 = require("./classes/Resources");
const config_1 = require("./config");
let client = new Discord.Client();
init();
start();
client.login(config_1.default.token);
function init() {
    client.config = config_1.default;
    client.usersInSession = new Map();
    client.masterLog = [];
    client.getGuild = function (guildName) {
        return client.usersInSession[guildName];
    };
    client.updateUser = function (content) {
        var guildName = content.hidden.guildname;
        var username = content.hidden.username;
        var guild = client.usersInSession[guildName];
        guild[username] = content;
        Object.defineProperty(content, "hidden", {
            enumerable: false
        });
    };
    client.registerUser = function (content) {
        client.updateUser(content);
        console.log("*Registered [" +
            content.hidden.username.magenta +
            "] to guild [" +
            content.hidden.guildname.magenta +
            "]");
    };
    client.hasUser = function (guild, username) {
        var userGuild = client.usersInSession[Resources_1.default.getGuildNameFromGuild(guild)];
        if (userGuild === null || typeof userGuild === "undefined")
            return false;
        var user = userGuild[username];
        return !(user === null || typeof user === "undefined");
    };
    client.getUserContent = function (guild, username) {
        var guildName = Resources_1.default.getGuildNameFromGuild(guild);
        var userGuild = client.usersInSession[guildName];
        if (userGuild === null) {
            console.error(("!! Could not retrieve [" + username + "'s] guild").red);
            return null;
        }
        if (userGuild[username] === null ||
            typeof userGuild[username] === "undefined") {
            console.error(("!! Could not locate [" + username + "] in [" + guildName + "]").red);
            return null;
        }
        return userGuild[username];
    };
    client.removeUser = function (guild, username) {
        var userGuild = client.usersInSession[Resources_1.default.getGuildNameFromGuild(guild)];
        if (userGuild === null || typeof userGuild === "undefined")
            return;
        userGuild["delete"](username);
    };
    client.deleteUser = function (guild, username) {
        client.removeUser(guild, username);
        Resources_1.default.destroyUserDirectory(guild, username);
    };
}
function start() {
    var eventsPath = path.join(__dirname, "events");
    fs.readdir(eventsPath, function (err, files) {
        if (err)
            return console.error(err);
        files.forEach(function (file) {
            if (!file.endsWith(".js"))
                return;
            var event = require(path.join(__dirname, "events", file));
            var eventName = file.split(".")[0];
            console.log("--registering event", eventName);
            client.on(eventName, event.bind(null, client));
            delete require
                .cache[require.resolve(path.join(__dirname, "events", file))];
        });
    });
    client.commands = new Map();
    var commandsPath = path.join(__dirname, "commands");
    fs.readdir(commandsPath, function (err, files) {
        if (err)
            return console.error(err);
        files.forEach(function (file) {
            if (!file.endsWith(".js"))
                return;
            var props = require(path.join(__dirname, "commands", file));
            var commandName = file.split(".")[0];
            console.log("--registering command", commandName, props);
            client.commands.set(commandName, props);
            console.log("--set command", commandName, props);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrQkFBZ0I7QUFFaEIsc0NBQXNDO0FBQ3RDLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFFN0IsbURBQXVDO0FBQ3ZDLHFDQUE4QjtBQUU5QixJQUFJLE1BQU0sR0FBUSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUV2QyxJQUFJLEVBQUUsQ0FBQztBQUNQLEtBQUssRUFBRSxDQUFDO0FBRVIsTUFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRTNCLFNBQVMsSUFBSTtJQUNYLE1BQU0sQ0FBQyxNQUFNLEdBQUcsZ0JBQU0sQ0FBQztJQUN2QixNQUFNLENBQUMsY0FBYyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDbEMsTUFBTSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFFdEIsTUFBTSxDQUFDLFFBQVEsR0FBRyxVQUFTLFNBQWlCO1FBQzFDLE9BQU8sTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQUM7SUFFRixNQUFNLENBQUMsVUFBVSxHQUFHLFVBQVMsT0FBWTtRQUN2QyxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUN6QyxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUN2QyxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzdDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxPQUFPLENBQUM7UUFDMUIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFO1lBQ3ZDLFVBQVUsRUFBRSxLQUFLO1NBQ2xCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUVGLE1BQU0sQ0FB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SSxDQUFDLENBQUMsQ0FBQztZQUM1RCxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXJDLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3pELE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUV4QyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2NvbG9ycyc7XG5cbmltcG9ydCAqIGFzIERpc2NvcmQgZnJvbSAnZGlzY29yZC5qcyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgcnNyYyBmcm9tICcuL2NsYXNzZXMvUmVzb3VyY2VzJztcbmltcG9ydCBjb25maWcgZnJvbSAnLi9jb25maWcnO1xuXG5sZXQgY2xpZW50OiBhbnkgPSBuZXcgRGlzY29yZC5DbGllbnQoKTtcblxuaW5pdCgpO1xuc3RhcnQoKTtcblxuY2xpZW50LmxvZ2luKGNvbmZpZy50b2tlbik7XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gIGNsaWVudC5jb25maWcgPSBjb25maWc7XG4gIGNsaWVudC51c2Vyc0luU2Vzc2lvbiA9IG5ldyBNYXAoKTtcbiAgY2xpZW50Lm1hc3RlckxvZyA9IFtdO1xuXG4gIGNsaWVudC5nZXRHdWlsZCA9IGZ1bmN0aW9uKGd1aWxkTmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGNsaWVudC51c2Vyc0luU2Vzc2lvbltndWlsZE5hbWVdO1xuICB9O1xuXG4gIGNsaWVudC51cGRhdGVVc2VyID0gZnVuY3Rpb24oY29udGVudDogYW55KSB7XG4gICAgdmFyIGd1aWxkTmFtZSA9IGNvbnRlbnQuaGlkZGVuLmd1aWxkbmFtZTtcbiAgICB2YXIgdXNlcm5hbWUgPSBjb250ZW50LmhpZGRlbi51c2VybmFtZTtcbiAgICB2YXIgZ3VpbGQgPSBjbGllbnQudXNlcnNJblNlc3Npb25bZ3VpbGROYW1lXTtcbiAgICBndWlsZFt1c2VybmFtZV0gPSBjb250ZW50O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb250ZW50LCBcImhpZGRlblwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgIH0pO1xuICB9O1xuXG4gIGNsaWVudC5yZWdpc3RlclVzZXIgPSBmdW5jdGlvbihjb250ZW50OiBhbnkpIHtcbiAgICBjbGllbnQudXBkYXRlVXNlcihjb250ZW50KTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIFwiKlJlZ2lzdGVyZWQgW1wiICtcbiAgICAgICAgY29udGVudC5oaWRkZW4udXNlcm5hbWUubWFnZW50YSArXG4gICAgICAgIFwiXSB0byBndWlsZCBbXCIgK1xuICAgICAgICBjb250ZW50LmhpZGRlbi5ndWlsZG5hbWUubWFnZW50YSArXG4gICAgICAgIFwiXVwiXG4gICAgKTtcbiAgfTtcblxuICBjbGllbnQuaGFzVXNlciA9IGZ1bmN0aW9uKGd1aWxkOiBEaXNjb3JkLkd1aWxkLCB1c2VybmFtZTogc3RyaW5nKSB7XG4gICAgdmFyIHVzZXJHdWlsZCA9IGNsaWVudC51c2Vyc0luU2Vzc2lvbltyc3JjLmdldEd1aWxkTmFtZUZyb21HdWlsZChndWlsZCldO1xuICAgIGlmICh1c2VyR3VpbGQgPT09IG51bGwgfHwgdHlwZW9mIHVzZXJHdWlsZCA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIHVzZXIgPSB1c2VyR3VpbGRbdXNlcm5hbWVdO1xuICAgIHJldHVybiAhKHVzZXIgPT09IG51bGwgfHwgdHlwZW9mIHVzZXIgPT09IFwidW5kZWZpbmVkXCIpO1xuICB9O1xuXG4gIGNsaWVudC5nZXRVc2VyQ29udGVudCA9IGZ1bmN0aW9uKGd1aWxkOiBEaXNjb3JkLkd1aWxkLCB1c2VybmFtZTogc3RyaW5nKSB7XG4gICAgdmFyIGd1aWxkTmFtZSA9IHJzcmMuZ2V0R3VpbGROYW1lRnJvbUd1aWxkKGd1aWxkKTtcbiAgICB2YXIgdXNlckd1aWxkID0gY2xpZW50LnVzZXJzSW5TZXNzaW9uW2d1aWxkTmFtZV07XG5cbiAgICBpZiAodXNlckd1aWxkID09PSBudWxsKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIiEhIENvdWxkIG5vdCByZXRyaWV2ZSBbXCIgKyB1c2VybmFtZSArIFwiJ3NdIGd1aWxkXCIpLnJlZCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICB1c2VyR3VpbGRbdXNlcm5hbWVdID09PSBudWxsIHx8XG4gICAgICB0eXBlb2YgdXNlckd1aWxkW3VzZXJuYW1lXSA9PT0gXCJ1bmRlZmluZWRcIlxuICAgICkge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgKFwiISEgQ291bGQgbm90IGxvY2F0ZSBbXCIgKyB1c2VybmFtZSArIFwiXSBpbiBbXCIgKyBndWlsZE5hbWUgKyBcIl1cIikucmVkXG4gICAgICApO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVzZXJHdWlsZFt1c2VybmFtZV07XG4gIH07XG5cbiAgY2xpZW50LnJlbW92ZVVzZXIgPSBmdW5jdGlvbihndWlsZDogRGlzY29yZC5HdWlsZCwgdXNlcm5hbWU6IHN0cmluZykge1xuICAgIHZhciB1c2VyR3VpbGQgPSBjbGllbnQudXNlcnNJblNlc3Npb25bcnNyYy5nZXRHdWlsZE5hbWVGcm9tR3VpbGQoZ3VpbGQpXTtcbiAgICBpZiAodXNlckd1aWxkID09PSBudWxsIHx8IHR5cGVvZiB1c2VyR3VpbGQgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybjtcblxuICAgIHVzZXJHdWlsZFtcImRlbGV0ZVwiXSh1c2VybmFtZSk7XG4gIH07XG5cbiAgY2xpZW50LmRlbGV0ZVVzZXIgPSBmdW5jdGlvbihndWlsZDogRGlzY29yZC5HdWlsZCwgdXNlcm5hbWU6IHN0cmluZykge1xuICAgIGNsaWVudC5yZW1vdmVVc2VyKGd1aWxkLCB1c2VybmFtZSk7XG4gICAgcnNyYy5kZXN0cm95VXNlckRpcmVjdG9yeShndWlsZCwgdXNlcm5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdGFydCgpIHtcbiAgdmFyIGV2ZW50c1BhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCBcImV2ZW50c1wiKTtcbiAgZnMucmVhZGRpcihldmVudHNQYXRoLCBmdW5jdGlvbihlcnIsIGZpbGVzKSB7XG4gICAgaWYgKGVycikgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICBmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgIGlmICghZmlsZS5lbmRzV2l0aChcIi5qc1wiKSkgcmV0dXJuO1xuICAgICAgdmFyIGV2ZW50ID0gcmVxdWlyZShwYXRoLmpvaW4oX19kaXJuYW1lLCBcImV2ZW50c1wiLCBmaWxlKSkgYXMgRnVuY3Rpb247XG4gICAgICB2YXIgZXZlbnROYW1lID0gZmlsZS5zcGxpdChcIi5cIilbMF07XG5cbiAgICAgIGNvbnNvbGUubG9nKFwiLS1yZWdpc3RlcmluZyBldmVudFwiLCBldmVudE5hbWUpO1xuICAgICAgY2xpZW50Lm9uKGV2ZW50TmFtZSwgZXZlbnQuYmluZChudWxsLCBjbGllbnQpKTtcbiAgICAgIGRlbGV0ZSByZXF1aXJlXG4gICAgICAgIC5jYWNoZVtyZXF1aXJlLnJlc29sdmUocGF0aC5qb2luKF9fZGlybmFtZSwgXCJldmVudHNcIiwgZmlsZSkpXTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgY2xpZW50LmNvbW1hbmRzID0gbmV3IE1hcCgpO1xuICB2YXIgY29tbWFuZHNQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgXCJjb21tYW5kc1wiKTtcblxuICBmcy5yZWFkZGlyKGNvbW1hbmRzUGF0aCwgZnVuY3Rpb24oZXJyLCBmaWxlcykge1xuICAgIGlmIChlcnIpIHJldHVybiBjb25zb2xlLmVycm9yKGVycik7XG4gICAgZmlsZXMuZm9yRWFjaChmdW5jdGlvbihmaWxlKSB7XG4gICAgICBpZiAoIWZpbGUuZW5kc1dpdGgoXCIuanNcIikpIHJldHVybjtcbiAgICAgIHZhciBwcm9wcyA9IHJlcXVpcmUocGF0aC5qb2luKF9fZGlybmFtZSwgXCJjb21tYW5kc1wiLCBmaWxlKSk7XG4gICAgICB2YXIgY29tbWFuZE5hbWUgPSBmaWxlLnNwbGl0KFwiLlwiKVswXTtcblxuICAgICAgY29uc29sZS5sb2coXCItLXJlZ2lzdGVyaW5nIGNvbW1hbmRcIiwgY29tbWFuZE5hbWUsIHByb3BzKTtcbiAgICAgIGNsaWVudC5jb21tYW5kcy5zZXQoY29tbWFuZE5hbWUsIHByb3BzKTtcblxuICAgICAgY29uc29sZS5sb2coXCItLXNldCBjb21tYW5kXCIsIGNvbW1hbmROYW1lLCBwcm9wcyk7XG4gICAgfSk7XG4gIH0pO1xufVxuIl19